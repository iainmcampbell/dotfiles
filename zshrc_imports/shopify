# Shopify
# ********************************************************

[ -f /opt/dev/dev.sh ] && source /opt/dev/dev.sh

[[ -f /opt/dev/sh/chruby/chruby.sh ]] && type chruby >/dev/null 2>&1 || chruby () { source /opt/dev/sh/chruby/chruby.sh; chruby "$@"; }

if [ -e /Users/imc/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/imc/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

nvm use default

alias partners="DISABLE_SHOPIFY_INTERNAL_API_INTERCEPTOR=1 dev rails"
alias clobber="bin/rails tmp:cache:clear && bin/rails assets:clobber"

alias npm_registry_shopify="npm config set @shopify:registry https://packages.shopify.io/shopify/node/npm/"
alias npm_registry_public="npm config set @shopify:registry https://registry.yarnpkg.com"

alias dev_shopify="/Users/imc/src/github.com/Shopify/shopify-app-cli/bin/shopify"

alias clean="yarn run sewing-kit clean --vendor-dll"
alias test="yarn test --watch"

# Spin

alias ss="spin shell"
alias sc="spin code"
alias so="spin open"
alias sl="spin list"

spin_install_subs() {
ssh $1.iain-campbell.us.spin.dev <<ENDSSH
cat <<EOT | bin/rails c

shop = Shop.find_by(name: 'Shop 1')

# Install Subscription App
api_client = ApiClient.find_by(id: 2525000000)
Apps::Installations::EnsureInstalled.perform(
    app_id: api_client.id,
    shop_id: shop.id,
    access_scope: Access::Scope.for_client(api_client, shop).map(&:to_s)
)

# Enable beta flags
shop.beta.enable 'argo_extensions_shops'
shop.beta.enable 'argo_extensions_dev_portal'

EOT

# Seed selling plan group for Subscription
bin/rails dev:subscriptions:create_selling_plan_group

ENDSSH
}

